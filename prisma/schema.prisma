// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// NOTES:
// ids  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
// createdAt         DateTime            @default(now()) @map("created_at")
// updatedAt         DateTime            @default(now()) @updatedAt @map("updated_at")

generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
}

//  generate zod schemas by model
// https://github.com/chrishoermann/zod-prisma-types
generator zod {
  provider = "zod-prisma-types"
  output   = "./zod" // default is ./generated/zod
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth, DO NOT CHANGE THIS!
model Account {
  id                       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                   String  @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String  @map("provider_account_id")
  refresh_token            String? @map("refresh_token") @db.Text
  access_token             String? @map("access_token") @db.Text
  // Github field
  refresh_token_expires_in Int?    @map("refresh_token_expires_in")
  expires_at               Int?    @map("expires_at")
  token_type               String? @map("token_type")
  scope                    String?
  id_token                 String? @map("id_token") @db.Text
  session_state            String? @map("session_state")
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

enum UserType {
  RECRUITER
  CANDIDATE
}

model User {
  id                   String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                 String?
  email                String         @unique
  emailVerified        DateTime?      @map("email_verified")
  completedOnboarding  Boolean        @default(false) @map("onboarding_completed")
  image                String?
  ghUsername           String?        @unique
  accounts             Account[]
  sessions             Session[]
  createdAssessments   Assessment[]
  memberships          Membership[]
  type                 UserType?      @map("type") //TODO: we are not discriminating by type yet
  candidate            Candidate?
  activeOrgId          String?        @map("active_org_id") @db.Uuid //TODO: this should be only in the sessions
  activeOrg            Organization?  @relation(fields: [activeOrgId], references: [id])
  createdCandidates    Candidate[]    @relation("userCandidateCreated")
  reviewingAssessments Assessment[]   @relation("userAssessmentReviewing")
  organizations        Organization[] @relation("userOrganizationOwner")
  reviews              Review[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Organization {
  id          String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String
  slug        String?      @unique
  logo        String?
  bio         String?
  size        String?
  members     Membership[]
  assessments Assessment[]
  candidates  Candidate[]
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  createdBy   User         @relation(name: "userOrganizationOwner", fields: [createdById], references: [id])
  createdById String       @map("created_by_id") @db.Uuid

  user       User[]
  Submission Submission[]

  @@map("organization")
}

enum MembershipRole {
  MEMBER
  REVIEWER
  ADMIN
  OWNER
}

model Membership {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String         @map("user_id") @db.Uuid
  accepted       Boolean        @default(false)
  role           MembershipRole @map("role")
  organization   Organization   @relation(fields: [organizationId], references: [id])
  organizationId String         @map("organization_id") @db.Uuid
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime       @default(now()) @map("created_at")

  @@unique([userId, organizationId])
  @@map("membership")
}

enum CandidateStatus {
  PENDING
  VERIFIED // github connect
  ARCHIVED
}

model Candidate {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user                    User?                     @relation(fields: [userId], references: [id])
  userId                  String?                   @unique @map("user_id") @db.Uuid
  organizationId          String?                   @map("organization_id") @db.Uuid
  assessmentSessions      AssessmentSession[]
  organization            Organization?             @relation(fields: [organizationId], references: [id])
  name                    String
  ghUsername              String?                   @map("gh_username")
  status                  CandidateStatus           @default(PENDING) @map("status")
  lastName                String                    @map("last_name")
  email                   String                    @unique
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  createdBy               User?                     @relation("userCandidateCreated", fields: [createdById], references: [id])
  createdById             String?                   @map("created_by_id") @db.Uuid
  contributions           Contribution[]
  submissions             Submission[]
  candidatesOnAssessments CandidatesOnAssessments[]

  @@unique([id, email, organizationId])
  @@map("candidate")
}

enum CandidateOnAssessmentStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model CandidatesOnAssessments {
  assessment   Assessment                  @relation(fields: [assessmentId], references: [id])
  assessmentId String                      @map("assessment_id") @db.Uuid
  candidate    Candidate                   @relation(fields: [candidateId], references: [id])
  candidateId  String                      @map("candidate_id") @db.Uuid
  status       CandidateOnAssessmentStatus @default(PENDING)

  @@id([candidateId, assessmentId])
  @@map("candidates_on_assessment")
}

// TODO: V2
enum AssessmentStatus {
  DRAFT
  ACTIVE // ready to accept candidates
  IN_PROGRESS // with active candidates 
  CLOSED // no longer accepting candidates
  ARCHIVED // deleted
}

enum Visibility {
  PUBLIC
  PRIVATE
  PROTECTED
}

model Assessment {
  id                      String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title                   String
  slug                    String?
  description             String
  status                  AssessmentStatus          @default(ACTIVE) @map("status")
  createdBy               User                      @relation(fields: [createdById], references: [id])
  createdById             String                    @map("created_by_id") @db.Uuid
  organization            Organization              @relation(fields: [organizationId], references: [id])
  organizationId          String                    @map("organization_id") @db.Uuid
  applicantSessions       AssessmentSession[]
  repositories            Repo[]
  ghIssuesQuerySeach      String?                   @map("gh_issues_query_seach")
  evaluationPeriodDays    String?                   @default("1") @map("evaluation_period_days")
  createdAt               DateTime                  @default(now()) @map("created_at")
  updatedAt               DateTime                  @default(now()) @updatedAt @map("updated_at")
  published               Boolean                   @default(false)
  visibility              Visibility                @default(PUBLIC)
  submissions             Submission[]
  reviewers               User[]                    @relation(name: "userAssessmentReviewing")
  candidatesOnAssessments CandidatesOnAssessments[]

  @@map("assessment")
}

enum AssessmentSessionStatus {
  STARTED
  FINISHED
}

model AssessmentSession {
  id           String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  // TODO: handle sessions expiration
  sessionToken String                  @unique @map("session_token")
  expiresAt    DateTime                @map("expires_at")
  status       AssessmentSessionStatus @default(STARTED) @map("status")
  assessment   Assessment              @relation(fields: [assessmentId], references: [id])
  assessmentId String                  @map("assessment_id") @db.Uuid
  startedAt    DateTime                @default(now()) @map("started_at")
  finishedAt   DateTime?               @map("finished_at")
  candidate    Candidate               @relation(fields: [candidateId], references: [id])
  candidateId  String                  @map("candidate_id") @db.Uuid
  submission   Submission[]

  @@map("assessment_session")
}

enum SubmissionStatus {
  TO_REVIEW // hr reviewing submissions
  REVIEWED // hr approved 
  REJECTED // hr rejected 
}

model Submission {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  status              SubmissionStatus  @default(TO_REVIEW)
  notes               String?
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @default(now()) @updatedAt @map("updated_at")
  candidate           Candidate         @relation(fields: [candidateId], references: [id])
  candidateId         String            @map("candidate_id") @db.Uuid
  session             AssessmentSession @relation(fields: [assessmentSessionId], references: [id])
  assessmentSessionId String            @map("assessment_session_id") @db.Uuid
  assessment          Assessment        @relation(fields: [assessmentId], references: [id])
  assessmentId        String            @map("assessment_id") @db.Uuid
  review              Review?
  contribution        Contribution?
  organization        Organization?     @relation(fields: [organizationId], references: [id])
  organizationId      String            @map("organization_id") @db.Uuid

  @@map("submission")
}

model Review {
  id                  String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  note                String
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @default(now()) @updatedAt @map("updated_at")
  createdBy           User                 @relation(fields: [createdById], references: [id])
  createdById         String               @map("created_by_id") @db.Uuid
  evaluationCriterias EvaluationCriteria[]
  totalScore          Int
  submission          Submission           @relation(fields: [submissionId], references: [id])
  submissionId        String               @unique @map("submission_id") @db.Uuid

  @@map("review")
}

enum ContributionType {
  PULL_REQUEST
  COMMENT
  ISSUE
}

// WE focus only in pull requests
model Contribution {
  id            String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type          ContributionType @default(PULL_REQUEST)
  title         String
  description   String?
  state         String
  url           String
  repo          String
  meta          Json?
  contributor   Candidate        @relation(fields: [contributorId], references: [id])
  contributorId String           @map("candidate_id") @db.Uuid
  createdAt     DateTime         @default(now()) @map("created_at")
  updatedAt     DateTime         @default(now()) @updatedAt @map("updated_at")
  submission    Submission       @relation(fields: [submissionId], references: [id])
  submissionId  String           @unique @map("submission_id") @db.Uuid

  @@map("contribution")
}

model Repo {
  id           Int         @id @default(autoincrement())
  name         String
  fullName     String
  description  String
  url          String
  isPrivate    Boolean
  assessment   Assessment? @relation(fields: [assessmentId], references: [id])
  assessmentId String?     @map("assessment_id") @db.Uuid

  @@map("repo")
}

model EvaluationCriteria {
  id       Int                  @id @default(autoincrement())
  name     String               @unique
  weight   Int                  @default(0)
  children EvaluationCriteria[] @relation("children")
  parent   EvaluationCriteria?  @relation("children", fields: [parentId], references: [id])
  parentId Int?                 @map("parent_id")
  reviews  Review[]

  @@map("evaluation_criteria")
}
